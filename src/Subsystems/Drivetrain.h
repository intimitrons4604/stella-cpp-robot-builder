// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef DRIVETRAIN_H
#define DRIVETRAIN_H
#include "Commands/Subsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Drivetrain: public Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<SpeedController> motorLeft1;
	std::shared_ptr<SpeedController> motorLeft2;
	std::shared_ptr<SpeedController> motorRight1;
	std::shared_ptr<SpeedController> motorRight2;
	std::shared_ptr<RobotDrive> robotDrive;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public:
	Drivetrain();
	void InitDefaultCommand();

	/**
	 * Drive the drivetrain
	 *
	 * @param straightValue Controls forward and backwards travel.
	 *        -1 <= straightValue <= 1, where -1 indicates full power backwards,
	 *        0 indicates no movement, and 1 indicates full power forwards.
	 *        Values outside this range will automatically be limited to the range by WPILib.
	 * @param turnValue Controls robot rotation.
     *        -1 <= turnValue <= 1, where -1 indicates full power clockwise rotation,
     *        0 indicates no movement, and 1 indicates full power counter-clockwise rotation.
     *        Values outside this range will automatically be limited to the range by WPILib.
	 * @param turbo When turbo is false, motor output is reduced when straightValue and turnValue are not at the
	 *        extremes of their ranges (-1 and 1). When turbo is true, motor output corresponds linearly
	 *        to straightValue and turnValue.
	 */
	void Drive(float straightValue, float turnValue, bool turbo = false);

	/**
	 * Stop all drivetrain motors.
	 *
	 * Internally, WPILib stops PWM output - depending on the controller and setup,
	 * this may brake or coast the motor shaft.
	 */
	void StopMotors();

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
};

#endif
