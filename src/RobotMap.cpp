// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::drivetrainMotorLeft1;
std::shared_ptr<SpeedController> RobotMap::drivetrainMotorLeft2;
std::shared_ptr<SpeedController> RobotMap::drivetrainMotorRight1;
std::shared_ptr<SpeedController> RobotMap::drivetrainMotorRight2;
std::shared_ptr<RobotDrive> RobotMap::drivetrainRobotDrive;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    drivetrainMotorLeft1.reset(new Talon(1));
    lw->AddActuator("Drivetrain", "MotorLeft1", std::static_pointer_cast<Talon>(drivetrainMotorLeft1));
    
    drivetrainMotorLeft2.reset(new Talon(2));
    lw->AddActuator("Drivetrain", "MotorLeft2", std::static_pointer_cast<Talon>(drivetrainMotorLeft2));
    
    drivetrainMotorRight1.reset(new Talon(3));
    lw->AddActuator("Drivetrain", "MotorRight1", std::static_pointer_cast<Talon>(drivetrainMotorRight1));
    
    drivetrainMotorRight2.reset(new Talon(4));
    lw->AddActuator("Drivetrain", "MotorRight2", std::static_pointer_cast<Talon>(drivetrainMotorRight2));
    
    drivetrainRobotDrive.reset(new RobotDrive(drivetrainMotorLeft1, drivetrainMotorLeft2,
              drivetrainMotorRight1, drivetrainMotorRight2));
    
    drivetrainRobotDrive->SetSafetyEnabled(true);
        drivetrainRobotDrive->SetExpiration(0.1);
        drivetrainRobotDrive->SetSensitivity(0.5);
        drivetrainRobotDrive->SetMaxOutput(1.0);
        drivetrainRobotDrive->SetInvertedMotor(RobotDrive::kFrontLeftMotor, true);
        drivetrainRobotDrive->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
