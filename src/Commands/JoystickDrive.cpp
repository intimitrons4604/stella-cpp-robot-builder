// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "JoystickDrive.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

JoystickDrive::JoystickDrive(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void JoystickDrive::Initialize() {
    drivetrain = Robot::drivetrain;
    driveJoystick = Robot::oi->getDriveJoystick();
}

// Called repeatedly when this Command is scheduled to run
void JoystickDrive::Execute() {
    bool turbo = driveJoystick->GetRawButton(TURBO_BUTTON_NUMBER);
    float straight = applyAxialDeadzone(driveJoystick->GetRawAxis(STRAIGHT_AXIS_NUMBER));
    float turn = applyAxialDeadzone(driveJoystick->GetRawAxis(TURN_AXIS_NUMBER));

    drivetrain->Drive(straight, turn, turbo);
}

// Make this return true when this Command no longer needs to run execute()
bool JoystickDrive::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void JoystickDrive::End() {
    Robot::drivetrain->StopMotors();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void JoystickDrive::Interrupted() {
    End();
}

float JoystickDrive::applyAxialDeadzone(float input, float size) {
    if (std::abs(input) < size) {
        return 0;
    }

    return input;
}
